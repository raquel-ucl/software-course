EXERCISE 1
----------

In this exercise, you will just create a simple script in a file called "0_hello_world.sh". Shell scripts have the ".sh" extension by convention, but your scripts will work anyway if you use another one or even none at all.

This is what you can do:

1. Create a new file
touch 0_hello_world.sh


2. Open it for edition. Kate is a nice text editor, for instance:
kate 0_hello_world.sh &

Note the & will open Kate in a new window, but will let you use your shell at the same time. If you don't include the &, you will have to open a new shell or close Kate in order to interact with the command line.


3. Write the contents of the script. In this case we'll just print out a text message in the screen, so this should be the content of the script file:
#!/bin/bash
# Print out a message in the shell
echo "Hello World!"

The first line "#!/bin/bash" indicates the shell where the interpreter that is needed to run this script is. In this case it is in /bin/bash, but if this were a Perl script, for example, the first line should read "#!/bin/perl", given the Perl interpreter lives in /bin/perl.
The following line is a comment. Lines starting with "#" will be ignored by the interpreter.
The last line prints out the "Hello World!" message. In Bash, the instruction to print out something in the shell is "echo"


4. Save the script and try to execute it by typing the relative path to the script:
./0_hello_world.sh

You have surely got this message:
bash: ./0_hello_world.sh: Permission denied

This means you have no permissions to execute the script yet!


5. Check current file permissions
ls -l 0_hello_world.sh

Look at the beginning of the output of this command: 
-rw-rw-r-- 

The r's and w's mean that all users have read permissions, and some of them have write permissions. To give execution permissions, you could do this:
chmod a+x 0_hello_world.sh

Check the permissions again and you'll see this:
-rwxrwxr-x

Those x's mean everyone has execution permisions for this script now.


6. Execute the script
./0_hello_world.sh

You should see a "Hello World!" message printed out in the shell.
Notice the "./" at the begining that indicates the shell the relative path to the script. This is not entirely necesary if you are in the same folder as your script is when running it, but a good practise. If you happen to name your script "cd", for example, and you just type "cd" to execute it, the shell will choose to execute the well known command "cd" instead of the script you have created. This may seem a silly example, but disasterous events can happen if you run the script you don't mean to run.


One step further:
More on security permisions and chmod (me/group/all, chmod 777, etc.)
Set up the PATH variable (so that the script can be executed from anywhere, no need of relative path)
bash_profile (set up aliases and PATH)
history (Ctrl+R, bash_history, change max n lines offset)


 








